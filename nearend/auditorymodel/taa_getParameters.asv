function p = taa_getParameters(fs, cutoff, M, N)

%%
p.fs            = fs;
p.N             = N;
p.M             = M;

%% prepare smoothing filter
p.cutoff      	= cutoff;

if p.cutoff==0
    p.h_s       = [1 zeros(1, p.N-1)];
else
    k           = 0:(p.N/2);
    a           = -exp(-2*pi*(p.cutoff/p.fs));
    p.h_s       = dsided((1+a)./sqrt(1+a^2+2*a*cos(2*pi*k/p.N)));
end

%% get auditory filterbank response
[p.h p.cf]  = getFBR(p.fs, p.N, p.M);

%% store weight functions
cf_sii  = [150 250 350 450 570 700 840 1000 1170 1370 1600 1850 2150 2500 2900 3400 4000 4800 5800 7000 8500];
bi_sii  = [0.0103 0.0261 0.0419 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0577 0.0460 0.0343 0.0226 0.0110];
p.bif 	= interp1(cf_sii, bi_sii, p.cf);
p.bif   = ones(size(p.bif));

p.bif   = p.bif/sum(p.bif);

function [h cf] = getFBR(fs, N, M)

%% prepare auditory filters
ref_dbrms   = 96;
f           = (0:(N/2))/N*fs;
f_min   	= 150;                                          % minimum center frequency
f_max     	= fs/2;                                         % maximum center frequency
erbminmax 	= 21.4*log10(4.37*([f_min f_max]./1000) + 1); 	% convert to erbs
cf_erb      = linspace(erbminmax(1), erbminmax(2), M);      % linspace M filters on ERB-scale
cf          = (10.^(cf_erb./21.4)-1)./4.37*1000;            % obtain center frequency in Hz
order       = 4;                                            % order of gammatone filters
h           = realgammatone(f(1:(N/2+1)), cf, order);       % auditory filter responses
h           = h./mean(sum(h(:, round(1+f_min/fs*N):round(1+f_max/fs*N)))); % normalize such that total power is 1 over the spectrum
%% get outer-middle ear filter
% h_omf    	= 3.64.*(f(1:(N/2+1))/1000).^(-0.8) - ...                           
%     6.5*exp(-.6*(f(1:(N/2+1))/1000-3.3).^2)+10.^(-3)*(f(1:(N/2+1))/1000).^4; 	% threshold in quiet in db 
% h_omf    	= 1./10.^((h_omf-ref_dbrms)./20);                                 	% linear outer-middle ear filter response
% thq1khz    	= 3.64.*(1).^(-0.8) - 6.5*exp(-.6*(1-3.3).^2)+10.^(-3)*(1).^4;   	% threshold in quiet at 1 kHz
% alpha    	= 1./10.^((thq1khz-ref_dbrms)./20);                              	% h_omf(1kHz) is normalized to 1
% h_omf     	= h_omf./alpha;

%% combine omf and auditory filters
% h           = dsided(h.*repmat(h_omf, [M 1]), 2);
h           = dsided(h, 2);

function  [A cf] = thirdoct(fs, N_fft, numBands, mn)
%   [A CF] = THIRDOCT(FS, N_FFT, NUMBANDS, MN) returns 1/3 octave band matrix
%   inputs:
%       FS:         samplerate 
%       N_FFT:      FFT size
%       NUMBANDS:   number of bands
%       MN:         center frequency of first 1/3 octave band
%   outputs:
%       A:          octave band matrix
%       CF:         center frequencies

f               = linspace(0, fs, N_fft+1);
f               = f(1:(N_fft/2+1));
k               = 0:(numBands-1); 
cf              = 2.^(k/3)*mn;
fl              = sqrt((2.^(k/3)*mn).*2.^((k-1)/3)*mn);
fr              = sqrt((2.^(k/3)*mn).*2.^((k+1)/3)*mn);
A               = zeros(numBands, length(f));

for i = 1:(length(cf))
    [a b]                   = min((f-fl(i)).^2);
    fl(i)                   = f(b);
    fl_ii                   = b;

	[a b]                   = min((f-fr(i)).^2);
    fr(i)                   = f(b);
    fr_ii                   = b;
    A(i,fl_ii:(fr_ii-1))	= 1;
end

rnk         = sum(A, 2);
numBands  	= find((rnk(2:end)>=rnk(1:(end-1))) & (rnk(2:end)~=0)~=0, 1, 'last' )+1;
A           = A(1:numBands, :);
cf          = cf(1:numBands);
A           = dsided(A, 2);